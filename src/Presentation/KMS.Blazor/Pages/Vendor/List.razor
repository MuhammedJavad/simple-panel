@page "/"
@page "/vendor/list"
@using Domain.ApplicationServices.VendorManagement
@using Domain.Common.Types
@using Domain.Aggregates.VendorManagement.Repositories.Dtos
@using Humanizer
@inject IToastService ToastService

@inject IVendorService Service

<Headline>
    <div class="row">
        <Collapse Title="Show Search Box">
            <div class="row">
                <div class="mt-3 col-md-6">
                    <label for="guid" class="form-label">Guid</label>
                    <InputGuid @bind-Value="_filterModel.Guid" class="form-control" id="guid"/>
                </div>
                <div class="mt-3 col-md-6">
                    <label for="client-id" class="form-label">Client Id</label>
                    <InputText @bind-Value="_filterModel.ClientId" class="form-control" id="client-id"/>
                </div>
                <div class="mt-3 col-md-6">
                    <label for="client-secret" class="form-label">Client Secret</label>
                    <InputText @bind-Value="_filterModel.ClientSecret" class="form-control" id="client-secret"/>
                </div>
                <div class="mt-3 col-md-6">
                    <label for="vendor-id" class="form-label">Vendor Id</label>
                    <InputNumber @bind-Value="_filterModel.VendorId" class="form-control" id="vendor-id"/>
                </div>
                <div class="mt-3 col-12">
                    <AsynchronousButton Title="Search" OnValidSubmit="Search" ClassName="btn btn-secondary">
                        <span class="oi oi-magnifying-glass" aria-hidden="true"></span>
                    </AsynchronousButton>
                </div>
            </div>
        </Collapse>
    </div>
    <div class="row">
        <div class="d-flex align-items-center justify-content-between">
            <Paging Pagination="_paging"/>
            <InsertButton Href="vendor/insert" Text="Insert"/>
        </div>
    </div>
</Headline>

<table class="table">
    <thead>
    <tr>
        <th scope="col" class="col">Guid</th>
        <th scope="col" class="col">Gateway</th>
        <th scope="col" class="col">Client Id</th>
        <th scope="col" class="col">Client Secret</th>
        <th scope="col" class="col">Username</th>
        <th scope="col" class="col">Password</th>
        <th scope="col" class="col">Vendor Id</th>
        <th scope="col" class="col">Actions</th>
    </tr>
    </thead>
    <tbody>

    @if (_paging is {IsEmpty: false })
    {
        foreach (var item in _paging.Current)
        {
            <tr>
                <td>@item.VendorGuid</td>
                <td>@item.Tenant.Humanize()</td>
                <td>@item.ClientId</td>
                <td>@item.ClientSecret</td>
                <td>@item.Name</td>
                <td>@item.Password</td>
                <td>@item.VendorId</td>
                <td>
                    <div class="btn-group btn-group-toggle" data-toggle="buttons">
                        <a class="btn btn-secondary" href="@($"vendor/update/{item.VendorGuid}")" title="Edit">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </a>
                        <AsynchronousButton ClassName="btn btn-warning"
                                            Title="Guid Healthcheck"
                                            OnValidSubmit="() => CheckVendorGuid(item.VendorGuid)">
                            <span class="oi oi-heart" aria-hidden="true"></span>
                        </AsynchronousButton>
                        <AsynchronousButton ClassName="btn btn-danger"
                                            Title="Clear Cache"
                                            OnValidSubmit="() => ClearCache(item.VendorGuid)">
                            <span class="oi oi-reload" aria-hidden="true"></span>
                        </AsynchronousButton>
                    </div>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

@code {
    private GetVendorPagingDto _filterModel = new();
    private Paging<GetVendorPagingResult>? _paging;

    protected override async Task OnInitializedAsync()
    {
        await Search();
        await base.OnInitializedAsync();
    }

    private async Task ClearCache(Guid vendorGuid)
    {
        var r = await Service.ClearVendorGuidCache(vendorGuid);
        if (r.IsOk)
        {
            ToastService.ShowSuccess("The cache has been successfully cleared.");
            return;
        }
        ToastService.ShowError(r.Message());
    }

    private async Task CheckVendorGuid(Guid vendorGuid)
    {
        var r = await Service.CheckVendorGuidWithCore(vendorGuid);
        if (r.IsOk)
        {
            ToastService.ShowSuccess("Vendor Guid is valid");
            return;
        }

        ToastService.ShowError(r.MessageCode() == default ? r.Result! : r.Message());
    }

    private async Task Search()
    {
        var r = await Service.GetVendorPaging(_filterModel);
        if (r.IsNotOk)
        {
            ToastService.ShowError(r.Message());
            return;
        }
        _paging = r.Result;
        await _paging!.MoveNextAsync();
        StateHasChanged();
    }

}